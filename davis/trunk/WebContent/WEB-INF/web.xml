<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
<display-name>Davis WebDAV-iRODS/SRB Gateway</display-name>
<filter>
<filter-name>Compression</filter-name>
<filter-class>webdavis.CompressionFilter</filter-class>
<!--
    compressionLevel:

        The compression level used by the filter.

        This controls how much compression is applied by the filter. Valid 
        values are 0 (no compression) through 9 (maximum compression), or -1 
        (default compression).

        Valid settings include:

            0		Use no compression.

            1 - 9	Compression level (1 is fastest/least compression, 9 is 
                	slowest/most compression).

            -1      Use a default compression level (medium speed/compression).

        Default Value:
    
            -1
-->
<!--
    <init-param>
        <param-name>compressionLevel</param-name>
        <param-value>9</param-value>
    </init-param>
-->
<!--
    gzipEnabled:

        Indicates whether GZIP compression is supported.

        This toggles support for GZIP compression on and off.

        Default Value:
    
            true
-->
<!--
    <init-param>
        <param-name>gzipEnabled</param-name>
        <param-value>true</param-value>
    </init-param>
-->
<!--
    deflateEnabled:

        Indicates whether "deflate" compression is supported.

        This toggles support for deflate compression on and off.

        Default Value:
    
            true
-->
<!--
    <init-param>
        <param-name>deflateEnabled</param-name>
        <param-value>true</param-value>
    </init-param>
-->
<!--
    methods:

        Indicates the HTTP/WebDAV methods to which compression will be 
        applied.

        This is a whitespace-separated list of method names (GET, POST, etc.). 
        The responses for requests using methods enumerated in the list will 
        be compressed using the configured strategy.

        Default Value:
    
            GET LOCK POST PROPFIND
-->
<!--
    <init-param>
        <param-name>methods</param-name>
        <param-value>GET LOCK POST PROPFIND</param-value>
    </init-param>
-->
</filter>
<filter-mapping>
<filter-name>Compression</filter-name>
<servlet-name>Davis</servlet-name>
</filter-mapping>
<servlet>
<servlet-name>Davis</servlet-name>
<servlet-class>webdavis.Davis</servlet-class>
	<init-param>
		<description>
			Configuration files to be read (in order)
		</description>
		<param-name>config-files</param-name>
		<param-value>davis-config.txt, davis-config-organisation.txt, davis-config-host.txt, davis-config-dev.txt</param-value>
	</init-param>

<!--
    alwaysAuthenticate:

        Determines whether authentication of the end user is always performed, 
        or only performed if required by the resource being accessed.

        If set to "true", authentication will always be requested (even if not 
        normally required to access the resource in question). This prevents 
        anonymous browsing of unprotected resources. Note that if a default 
        domain controller is not set (either via "jcifs.smb.client.domain" or 
        "jcifs.http.domainController") the root will still be anonymously 
        browseable.

        Default Value:
    
            true (authentication is always performed if possible).
-->
<!--
    <init-param>
        <param-name>alwaysAuthenticate</param-name>
        <param-value>true</param-value>
    </init-param>
-->
<!--
    jcifs.http.enableBasic:

        Indicates whether HTTP Basic authentication is offered by Davis.

        This setting specifies whether Davis should offer HTTP Basic 
        authentication to the client. Basic authentication can be used by 
        clients which are not NTLM-capable, but is a much less secure 
        authentication scheme. By default, Davis will only use HTTP Basic 
        over HTTPS.

        Default Value:
    
            true (HTTP Basic authentication is offered over HTTPS).
-->
<!--
    <init-param>
        <param-name>jcifs.http.enableBasic</param-name>
        <param-value>true</param-value>
    </init-param>
-->
<!--
    acceptBasic:

        Indicates whether HTTP Basic authentication is accepted by Davis 
        if sent proactively by the client.

        Specifies whether HTTP Basic credentials are accepted by Davis 
        when presented by clients. This differs from "jcifs.http.enableBasic" 
        in that HTTP Basic authentication will not be offered as a choice by 
        the server; it will just accept such credentials if sent proactively 
        by clients. If enabled, HTTP Basic will only be accepted over secure 
        connections (HTTPS) by default.

        This setting is ignored if "jcifs.http.enableBasic" is set to "true".

        Default Value:
    
            false (HTTP Basic is not accepted unless offered).
-->
<!--
    <init-param>
        <param-name>acceptBasic</param-name>
        <param-value>false</param-value>
    </init-param>
-->
<!--
    closeOnAuthenticate:

        Specifies whether Davis should close the HTTP connection when 
        starting authentication.

        This setting specifies if Davis should send the "Connection: 
        close" HTTP header when initially responding to requests for 
        authentication. This is not necessary, but more closely mirrors the 
        behavior of IIS. Note that setting this to "true" will have an 
        adverse impact on performance.

        Default Value:
    
            false (the HTTP connection remains open throughout the 
            authentication sequence).
-->
<!--
    <init-param>
        <param-name>closeOnAuthenticate</param-name>
        <param-value>false</param-value>
    </init-param>
-->
<!--
    webdavis.LockManagerFactory:

        Specifies the lock manager factory implementation class.

        This setting provides the classname of the lock manager factory 
        implementation. The specified class must extend 
        "webdavis.LockManagerFactory" and provide a no-argument constructor.

        If not specified, a default lock manager factory will be used which 
        supports both exclusive and shared application server locks (not 
        backed by a physical lock on the SMB resource).
 
        The parameters provided to the lock manager will be built from all 
        servlet initialization parameters that are prefixed with 
        "webdavis.LockManagerFactory.". The prefix will be stripped from the 
        parameter names before presentation to the lock manager factory 
        instance. For example, specifying a servlet initialization parameter 
        "webdavis.LockManagerFactory.defaultTimeout" with a value of "300000" 
        will pass the value to the lock manager factory as the 
        "defaultTimeout" property.

        Valid settings include:

            (empty)


                If unspecified, a lock manager factory will be used which 
                manages locks at an application server level.

            webdavis.NoLockManagerFactory


                A lock manager factory which disables locking support. 
                Behavior will be consistent with older versions of Davis 
                (which did not provide locking support).

            webdavis.SmbLockManagerFactory


                A lock manager factory which maintains a physical lock on SMB 
                file resources.

            (any valid lock manager classname)


                A custom lock manager factory can be specified.
-->
<!--
    <init-param>
        <param-name>webdavis.LockManagerFactory</param-name>
        <param-value>com.foo.MyLockManagerFactory</param-value>
    </init-param>
-->
<!--
    webdavis.LockManagerFactory.defaultTimeout:

        Default lock timeout.

        This corresponds to the "defaultTimeout" parameter supported by the 
        default lock manager factory, and specifies the lock lifetime in 
        milliseconds. "-1" indicates locks should have an infinite lifetime 
        (locks are only released on unlock).

        Default Value:
    
            -1 (locks will not expire)
-->
<!--
    <init-param>
        <param-name>webdavis.LockManagerFactory.defaultTimeout</param-name>
        <param-value>-1</param-value>
    </init-param>
-->
<!--
    webdavis.LockManagerFactory.maximumTimeout:

        Maximum lock timeout.

        This corresponds to the "maximumTimeout" parameter supported by the 
        default lock manager factory, and specifies the maximum allowable lock 
        timeout. If a client specifies a timeout exceeding this value, this 
        value will be used instead. Additionally, if the default timeout 
        exceeds this value it will be "trimmed" as well.

        Default Value:
    
            -1 (no maximum, infinite timeouts are permitted)
-->
<!--
    <init-param>
        <param-name>webdavis.LockManagerFactory.maximumTimeout</param-name>
        <param-value>-1</param-value>
    </init-param>
-->
<!--
    fileFilters:

        Specifies a set of filter names, in the order in which they should be 
        applied.

        This setting contains a whitespace-separated list of filter names in 
        execution order. Each filter must implement 
        "jcifs.smb.SmbFileFilter"; if a filter additionally implements 
        "webdavis.DavisFileFilter", it will be initialized with a set of 
        configuration parameters. A resource must be accepted by all 
        specified filters; rejection by any of the filters will result in 
        rejection of the resource request.

        There should be an additional parameter for each filter name, 
        specifying the corresponding filter class; so if "myFilter" was 
        declared here, you would also define a "myFilter" parameter with the 
        filter classname given as the value (e.g., "com.foo.MyFilter").
 
        The parameters provided to each filter will be built from all servlet 
        initialization parameters that are prefixed with the filter's name 
        (e.g., "myFilter.*"). The prefix will be stripped from the parameter 
        names before presentation to the filter instance; so the parameter 
        "myFilter.someParam" will be presented to the filter as the property 
        "someParam".
-->
<!--
    <init-param>
        <param-name>fileFilters</param-name>
        <param-value>myFirstFilter mySecondFilter</param-value>
    </init-param>
-->
<!--
    hiddenFilter:

        Rejects hidden resources.

        This is a filter type which rejects hidden SMB resources (the 
        parameter name would actually correspond to the filter name declared 
        in the "fileFilters" parameter). The classname for this filter is 
        "webdavis.filters.HiddenFilter".
-->
<!--
    
    <init-param>
        <param-name>fileFilters</param-name>
        <param-value>myHiddenFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myHiddenFilter</param-name>
        <param-value>webdavis.filters.HiddenFilter</param-value> 
    </init-param>
-->
<!--
    serverFilter:

        Permits only resources from a specific list of servers.

        This is a filter type which will only accept resources from a specific 
        list of servers (the parameter name would actually correspond to the 
        filter name declared in the "fileFilters" parameter). The classname 
        for this filter is "webdavis.filters.ServerFilter".

        This filter accepts a "servers" property, containing a 
        whitespace-separated list of server/workgroup names (note that parent 
        workgroup names may need to be included if users need to browse down 
        to the server level from the parent). The "acceptRoot" property 
        indicates whether this filter should accept the "smb://" resource. If 
        "acceptRoot" is set to false, the SMB root will not be browseable. By 
        default, the root is browseable ("acceptRoot" is true).
 
        This filter can be used in combination with a NotFilter to exclude 
        specific servers. Note that the NotFilter will inverse the logic of 
        the "acceptRoot" parameter as well; if a NotFilter is applied, the SMB 
        root will only be accessible if "acceptRoot" is set to false.
-->
<!--
    
    <init-param>
        <param-name>fileFilters</param-name>
        <param-value>myServerFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myServerFilter</param-name>
        <param-value>webdavis.filters.ServerFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myServerFilter.servers</param-name>
        <param-value>MYSERVER OTHERSERVER WORKGROUP</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myServerFilter.acceptRoot</param-name>
        <param-value>false</param-value> 
    </init-param>
-->
<!--
    andFilter:

        Chains multiple filters together using "AND" logic.

        This is a filter type which chains together one or more underlying 
        filters (the parameter name would actually correspond to the filter 
        name declared in the "fileFilters" parameter). A resource will be 
        accepted by this filter only if all subfilters accept the resource. 
        The classname for this filter is "webdavis.filters.AndFilter".

        This filter accepts a "fileFilters" parameter containing a 
        whitespace-separated list of subfilter names (in the same format as 
        the global "fileFilters" parameter). An additional parameter would be 
        passed to this filter for each declared subfilter, specifying the 
        classname of the underlying filter.

        Parameters can be specified for subfilters by prefixing the parameter 
        name with the name of the subfilter. For example, if this filter is 
        named "myAndFilter", and has a subfilter named "mySubFilter", a 
        property "subProperty" can be passed by declaring a servlet parameter 
        "myAndFilter.mySubFilter.subProperty".
-->
<!--
    
    <init-param>
        <param-name>fileFilters</param-name>
        <param-value>myAndFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myAndFilter</param-name>
        <param-value>webdavis.filters.AndFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myAndFilter.fileFilters</param-name>
        <param-value>mySubFilter1 mySubFilter2</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myAndFilter.mySubFilter1</param-name>
        <param-value>com.foo.MyFilter</param-value> 
    </init-param>
    <init-param>
        <param-name>myAndFilter.mySubFilter2</param-name>
        <param-value>com.foo.MyOtherFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myAndFilter.mySubFilter1.subProperty</param-name>
        <param-value>subValue</param-value> 
    </init-param>
-->
<!--
    orFilter:

        Chains multiple filters together using "OR" logic.

        This is a filter type which chains together one or more underlying 
        filters (the parameter name would actually correspond to the filter 
        name declared in the "fileFilters" parameter). A resource will be 
        accepted by this filter if any subfilter accepts the resource. The 
        classname for this filter is "webdavis.filters.OrFilter".

        This filter accepts a "fileFilters" parameter containing a 
        whitespace-separated list of subfilter names (in the same format as 
        the global "fileFilters" parameter). An additional parameter would be 
        passed to this filter for each declared subfilter, specifying the 
        classname of the underlying filter.

        Parameters can be specified for subfilters by prefixing the parameter 
        name with the name of the subfilter. For example, if this filter is 
        named "myOrFilter", and has a subfilter named "mySubFilter", a 
        property "subProperty" can be passed by declaring a servlet parameter 
        "myOrFilter.mySubFilter.subProperty".
-->
<!--
    
    <init-param>
        <param-name>fileFilters</param-name>
        <param-value>myOrFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myOrFilter</param-name>
        <param-value>webdavis.filters.OrFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myOrFilter.fileFilters</param-name>
        <param-value>mySubFilter1 mySubFilter2</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myOrFilter.mySubFilter1</param-name>
        <param-value>com.foo.MyFilter</param-value> 
    </init-param>
    <init-param>
        <param-name>myOrFilter.mySubFilter2</param-name>
        <param-value>com.foo.MyOtherFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myOrFilter.mySubFilter1.subProperty</param-name>
        <param-value>subValue</param-value> 
    </init-param>
-->
<!--
    notFilter:

        Inverts the result of a subfilter.

        This is a filter type which inverts the result of an underlying filter 
        (the parameter name would actually correspond to the filter name 
        declared in the "fileFilters" parameter). A resource will be accepted 
        by this filter only if the subfilter rejects the resource. The 
        classname for this filter is "webdavis.filters.NotFilter".

        This filter accepts a "filter" parameter containing the subfilter's 
        classname. Any other parameters specified for this filter will be 
        passed to the subfilter.
-->
<!--
    
    <init-param>
        <param-name>fileFilters</param-name>
        <param-value>myNotFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myNotFilter</param-name>
        <param-value>webdavis.filters.NotFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myNotFilter.filter</param-name>
        <param-value>com.foo.MyFilter</param-value> 
    </init-param>
    
    <init-param>
        <param-name>myNotFilter.subProperty</param-name>
        <param-value>subValue</param-value> 
    </init-param>
-->
<!--
    errorHandlers:

        Specifies a list of error handling classes.

        This setting contains a whitespace-separated list of classnames, each 
        of which represents an error handling class (implementing the 
        "webdavis.ErrorHandler" interface). Each handler will be invoked in the 
        order declared to process any errors thrown by Davis method 
        handlers.

        If no error handlers are specified, Davis will install 
        "webdavis.DefaultAuthErrorHandler" and "webdavis.DefaultIOErrorHandler" 
        (in that order). If you install a custom error handler, these may 
        need to be added to the chain explicitly.

        Default Value:
    
            webdavis.DefaultAuthErrorHandler webdavis.DefaultIOErrorHandler
-->
<!--
    <init-param>
        <param-name>errorHandlers</param-name>
        <param-value>webdavis.DefaultAuthErrorHandler webdavis.DefaultIOErrorHandler</param-value>
    </init-param>
-->
<!--
    errorHandler.authenticationFailureBehavior:

        Specifies how Davis's default error handler should behave when 
        authentication to an underlying resource fails.

        This setting controls the behavior presented to the client when an 
        authentication-related error is encountered.

        Valid settings include:

            authenticate


                The request fails with an HTTP 401 (Unauthorized) status, and 
                new credentials are requested from the user.

            unauthorized


                The request fails with an HTTP 401 (Unauthorized) status, but 
                no authentication is requested.

            forbidden


                The request fails with an HTTP 403 (Forbidden) status.

            notfound


                The request fails with an HTTP 404 (Not Found) status.

            ignore


                The error is ignored, and an HTTP 200 (Success) status is 
                returned. This does not allow access to the resource; it 
                simply returns an empty response body with a success status.

        Default Value:
    
            authenticate (a 401 (Unauthorized) status will be sent, and new 
            credentials will be requested).
-->
<!--
    <init-param>
        <param-name>errorHandler.authenticationFailureBehavior</param-name>
        <param-value>authenticate</param-value>
    </init-param>
-->
<!--
    errorHandler.ioFailureBehavior:

        Specifies how Davis's default error handler should behave when an 
        IO exception is encountered.

        This setting controls the behavior presented to the client when an IO 
        exception is encountered.

        Valid settings include:

            servererror


                The request fails with an HTTP 500 (Internal Server Error) 
                status.

            notfound


                The request fails with an HTTP 404 (Not Found) status.

            gone


                The request fails with an HTTP 410 (Gone) status.

            ignore


                The error is ignored, and an HTTP 200 (Success) status is 
                returned. This does not resolve the error; it simply returns 
                an empty response body with a success status.

        Default Value:
    
            servererror (a 500 (Internal Server Error) status will be sent).
-->
<!--
    <init-param>
        <param-name>errorHandler.ioFailureBehavior</param-name>
        <param-value>servererror</param-value>
    </init-param>
-->
<!--
    errorHandler.sendError:

        Indicates how Davis's default error handlers should relay an error 
        status.

        This setting controls the approach Davis uses to relay error 
        statuses to the container. Setting this to "true" indicates that 
        Davis should use the HttpServletResponse.sendError method to 
        signal the error to the container. "false" indicates 
        HttpServletResponse.setStatus/flushBuffer should be used instead.

        The actual behavior exhibited is container-specific; typically "true" 
        will present an error page to the client and close the HTTP connection 
        (more desirable for web browsers, as it gives a visual indication of 
        the error). "false" will typically present an empty response body and 
        keep the connection alive (more desirable for WebDAV clients, as they 
        would not see the response body anyway).

        Default Value:
    
            true (use HttpServletResponse.sendError).
-->
<!--
    <init-param>
        <param-name>errorHandler.sendError</param-name>
        <param-value>true</param-value>
    </init-param>
-->
<!--
    webdavis.Log:

        Specifies the logging implementation classname.

        This setting provides the classname of the logging implementation. 
        The specified class must extend "webdavis.Log" and provide a no-argument 
        constructor.

        If not specified, a default logger will be used which logs to 
        System.out and System.err.
-->
<!--
    <init-param>
        <param-name>webdavis.Log</param-name>
        <param-value>com.foo.MyLogger</param-value>
    </init-param>
-->
<!--
    webdavis.Log.threshold:

        Specifies the logging threshold.

        This configures the threshold level for logging events. Levels are 
        cumulative; for example, specifying "WARNING" will log warnings, 
        errors, and critical errors.

        Valid settings include:

            NOTHING


                Nothing is logged.

            CRITICAL


                Critical errors are logged.

            ERROR


                Errors are logged.

            WARNING


                Warnings are logged.

            INFORMATION


                Informational messages are logged.

            DEBUG


                Debug messages are logged.

        Default Value:
    
            CRITICAL (only critical errors are logged).
-->

    <!-- <init-param>
        <param-name>webdavis.Log.threshold</param-name>
        <param-value>WARNING</param-value>
    </init-param>-->

<!--
    jargon.debug:

        Specifies the logging threshold for the jargon library.

		The extent of debugging information increases with higher values.

		0: No debuging information.

		1: A number of methods in GeneralFile can actually result in IOExceptions 
		due to failures communicating to the server. These exceptions are caught 
		and handled within that GeneralFile method. However sometimes it can be 
		useful to see what exceptions did occur. The stack trace of those exceptions 
		are printed to System.err. As well as the name of each low level method call 
		to the server.

		2: Adds information about connection and authentication. Helps to insure 
		you are connecting to the expected server as the correct user.

    		* Higher debugging levels get especially technical... 

		3: Adds information about the query return value.

		4: Adds even more information about the query result and the actual query that was sent to the server.

    		* Debugging levels beyond here are probably only useful to a developer expanding the Jargon API. 

		5: Adds the actual bytes sent to the sever by a query and the bytes returned from the server after a query.

		6: Adds every byte sent on the socket connection to the server and every byte returned by the server. 
		You'll probably want to read the section on the SRB protocol. 

        Default Value:
    
            0 
-->
<!-- 
    <init-param>
        <param-name>jargon.debug</param-name>
        <param-value>5</param-value>
    </init-param>
 -->
<!--
    request-uri.charset:

        Specifies the character set used to interpret request URIs.

        When a request contains characters outside the 7-bit ASCII set, 
        Davis must interpret them according to a selected character set. 
        Most clients will use UTF-8 to request such resources; some versions 
        of Windows' Web Folders client notably vary from this. If the request 
        does not match a resource with this character set, Davis will 
        re-attempt using UTF-8.

        Default Value:
    
            ISO-8859-1
-->
<!--
    <init-param>
        <param-name>request-uri.charset</param-name>
        <param-value>ISO-8859-1</param-value>
    </init-param>
-->
<!--
    maximumXmlRequest:

        Specifies the maximum allowable size for an XML request sent by the 
        client.

        This specifies the maximum size of an XML request document in bytes. 
        When processing XML-based requests (such as LOCK or PROPFIND), 
        Davis uses this parameter to control the amount of data that will 
        be accepted from the client. This protects against certain XML-based 
        denial of service attacks, in which the client sends a very large 
        request in an attempt to consume all available server resources.

        Default Value:
    
            20000 (about 20 kilobytes).
-->
<!--
    <init-param>
        <param-name>maximumXmlRequest</param-name>
        <param-value>20000</param-value>
    </init-param>
-->
<!--
    contextBase:

        Specifies a base HTTP context to apply to URIs within Davis.

        This setting specifies a base context for URL rewriting, used to 
        deploy Davis in a reverse proxying scenario. Davis will 
        rewrite URLs relative to the supplied URL context.
 -->
<!--
    <init-param>
        <param-name>contextBase</param-name>
        <param-value>https://proxy/base/</param-value>
    </init-param>
-->
<!--
    contextBaseHeader:

        Indicates the name of an HTTP header containing a context base to 
        apply to URIs within Davis.

        This specifies an HTTP header that will provide Davis with a 
        context base for URL rewriting. If the request carries this header, 
        the value will be used as the rewriting context, overriding any value 
        specified in the "contextBase" parameter. If the header is not 
        present, th value in the "contextBase" parameter will be used (if 
        available).
-->
<!--
    <init-param>
        <param-name>contextBaseHeader</param-name>
        <param-value>Davis-Base</param-value>
    </init-param>
-->
<!--
    ui.html:

        Provides the location of the default user interface html file.

        Default Value:
    
            /META-INF/dui.html (loads a default file from the Davis jarfile).
-->
<!--
    <init-param>
        <param-name>ui.html</param-name>
        <param-value>/META-INF/ui.html</param-value>
    </init-param>
-->
<!--
    directory.xsl:

        Provides the location of the default directory view stylesheet.

        This setting specifies the location of the XSL stylesheet used to 
        present the directory view. This stylesheet transforms the PROPFIND 
        XML response into the HTML presented to browsers viewing a directory 
        listing.

        Valid settings include:

            /META-INF/directory.xsl


                The "standard" Davis look and feel.

            /META-INF/dos.xsl


                The DOS look and feel.

            (any valid stylesheet location)


                A custom stylesheet can be specified. See the class 
                documentation for "webdavis.DefaultGetHandler" for details.

        Default Value:
    
            /META-INF/directory.xsl (loads a default stylesheet from the 
            Davis jarfile).
-->
<!--
    <init-param>
        <param-name>directory.xsl</param-name>
        <param-value>/META-INF/directory.xsl</param-value>
    </init-param>
-->
<!--
    directory.configuration:

        Provides the location of the directory view configuration page.

        This setting specifies the location of the configuration page for the 
        directory view. Users can configure preferred stylesheets by pointing 
        their browsers at any Davis collection resource (such as a server, 
        workgroup, or even the root) and passing "configure" as a URL 
        parameter:

        http://server/Davis/any/?configure

        The location of the configuration page that is loaded can be specified 
        here.

        Default Value:
    
            /META-INF/configuration.html (loads a default configuration page 
            from the Davis jarfile).
-->
<!--
    <init-param>
        <param-name>directory.configuration</param-name>
        <param-value>/META-INF/configuration.html</param-value>
    </init-param>
-->
<!--
    handler.COPY:

        Specifies the default handler for the COPY method.

        This specifies the name of the class that will handle requests using 
        the COPY method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultCopyHandler
-->
<!--
    <init-param>
        <param-name>handler.COPY</param-name>
        <param-value>webdavis.DefaultCopyHandler</param-value>
    </init-param>
-->
<!--
    handler.DELETE:

        Specifies the default handler for the DELETE method.

        This specifies the name of the class that will handle requests using 
        the DELETE method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultDeleteHandler
-->
<!--
    <init-param>
        <param-name>handler.DELETE</param-name>
        <param-value>webdavis.DefaultDeleteHandler</param-value>
    </init-param>
-->
<!--
    handler.GET:

        Specifies the default handler for the GET method.

        This specifies the name of the class that will handle requests using 
        the GET method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultGetHandler
-->
<!--
    <init-param>
        <param-name>handler.GET</param-name>
        <param-value>webdavis.DefaultGetHandler</param-value>
    </init-param>
-->
<!--
    handler.HEAD:

        Specifies the default handler for the HEAD method.

        This specifies the name of the class that will handle requests using 
        the HEAD method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultHeadHandler
-->
<!--
    <init-param>
        <param-name>handler.HEAD</param-name>
        <param-value>webdavis.DefaultHeadHandler</param-value>
    </init-param>
-->
<!--
    handler.LOCK:

        Specifies the default handler for the LOCK method.

        This specifies the name of the class that will handle requests using 
        the LOCK method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultLockHandler
-->
<!--
    <init-param>
        <param-name>handler.LOCK</param-name>
        <param-value>webdavis.DefaultLockHandler</param-value>
    </init-param>
-->
<!--
    handler.MKCOL:

        Specifies the default handler for the MKCOL method.

        This specifies the name of the class that will handle requests using 
        the MKCOL method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultMkcolHandler
-->
<!--
    <init-param>
        <param-name>handler.MKCOL</param-name>
        <param-value>webdavis.DefaultMkcolHandler</param-value>
    </init-param>
-->
<!--
    handler.MOVE:

        Specifies the default handler for the MOVE method.

        This specifies the name of the class that will handle requests using 
        the MOVE method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultMoveHandler
-->
<!--
    <init-param>
        <param-name>handler.MOVE</param-name>
        <param-value>webdavis.DefaultMoveHandler</param-value>
    </init-param>
-->
<!--
    handler.OPTIONS:

        Specifies the default handler for the OPTIONS method.

        This specifies the name of the class that will handle requests using 
        the OPTIONS method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultOptionsHandler
-->
<!--
    <init-param>
        <param-name>handler.OPTIONS</param-name>
        <param-value>webdavis.DefaultOptionsHandler</param-value>
    </init-param>
-->
<!--
    handler.POST:

        Specifies the default handler for the POST method.

        This specifies the name of the class that will handle requests using 
        the POST method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultPostHandler
-->
<!--
    <init-param>
        <param-name>handler.POST</param-name>
        <param-value>webdavis.DefaultPostHandler</param-value>
    </init-param>
-->
<!--
    handler.PROPFIND:

        Specifies the default handler for the PROPFIND method.

        This specifies the name of the class that will handle requests using 
        the PROPFIND method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultPropfindHandler
-->
<!--
    <init-param>
        <param-name>handler.PROPFIND</param-name>
        <param-value>webdavis.DefaultPropfindHandler</param-value>
    </init-param>
-->
<!--
    handler.PROPPATCH:

        Specifies the default handler for the PROPPATCH method.

        This specifies the name of the class that will handle requests using 
        the PROPPATCH method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultProppatchHandler
-->
<!--
    <init-param>
        <param-name>handler.PROPPATCH</param-name>
        <param-value>webdavis.DefaultProppatchHandler</param-value>
    </init-param>
-->
<!--
    handler.PUT:

        Specifies the default handler for the PUT method.

        This specifies the name of the class that will handle requests using 
        the PUT method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultPutHandler
-->
<!--
    <init-param>
        <param-name>handler.PUT</param-name>
        <param-value>webdavis.DefaultPutHandler</param-value>
    </init-param>
-->
<!--
    handler.UNLOCK:

        Specifies the default handler for the UNLOCK method.

        This specifies the name of the class that will handle requests using 
        the UNLOCK method. The specified class must at a minimum implement 
        "webdavis.MethodHandler" and provide a no-argument constructor; it is 
        highly recommended that it also extend "webdavis.AbstractHandler".

        Default Value:
    
            webdavis.DefaultUnlockHandler
-->
<!--
    <init-param>
        <param-name>handler.UNLOCK</param-name>
        <param-value>webdavis.DefaultUnlockHandler</param-value>
    </init-param>
-->

<!--
    anonymousCredentials:

        Specifies an account to use for anonymous browsing.
        Syntax is username:password


-->
    <!-- <init-param>
        <param-name>anonymousCredentials</param-name>
        <param-value>anonymous:anything</param-value>
    </init-param>-->

<!--
    anonymousCollections:

        Specifies collections for anonymous browsing.
        split by comma, e.g. /ARCS/projects/public,/ARCS/projects/open


-->
    <!-- <init-param>
        <param-name>anonymousCollections</param-name>
        <param-value>/ARCS/projects/public,/ARCS/projects/open</param-value>
    </init-param>-->



<!--
    insecureConnection:

        Indicates which authentication method will be used if users establish
        an insecure connection (HTTP). The supported values are:

        shib (shibboleth authentication)
        basic (basic authentication, really not secure, use it if you know what you are doing!)
        block (doesn't allow insecure connections)
		digest (will be supported in the future)

        Default Value:
    
            block
-->

    <!-- <init-param>
        <param-name>insecureConnection</param-name>
        <param-value>shib</param-value>
    </init-param>
    <init-param>
        <param-name>shared-token-header-name</param-name>
        <param-value>auEduPersonSharedToken</param-value>
    </init-param>
    <init-param>
        <param-name>cn-header-name</param-name>
        <param-value>cn</param-value>
    </init-param>
    <init-param>
        <param-name>admin-cert-file</param-name>
        <param-value>/etc/grid-security/hostcert.pem</param-value>
    </init-param>
    <init-param>
        <param-name>admin-key-file</param-name>
        <param-value>/etc/grid-security/hostkey.pem</param-value>
    </init-param>-->


<!-- 		<init-param>
			<description>
				organisation name - default is Davis
			</description>
			<param-name>organisation-name</param-name>
			<param-value>Australian Research Collaboration Service</param-value>
		</init-param> 
		<init-param>
			<description>
				authentication realm - default is Davis
			</description>
			<param-name>authentication-realm</param-name>
			<param-value>ARCS Data Fabric</param-value>
		</init-param> 
		<init-param>
			<description>
				organisation logo
			</description>
			<param-name>organisation-logo</param-name>
			<param-value>/images/logo.jpg</param-value>
		</init-param>
		<init-param>
			<description>
				organisation logo geometry - widthxheight
			</description>
			<param-name>organisation-logo-geometry</param-name>
			<param-value>32x32</param-value>
		</init-param>	
		<init-param>
			<description>
				favicon for browser title bar
			</description>
			<param-name>favicon</param-name>
			<param-value>http://www.arcs.org.au/favicon.ico</param-value>
		</init-param> -->
		<!-- <init-param>
			<description>
				myproxy server where certs are stored
			</description>
			<param-name>myproxy-server</param-name>
			<param-value>myproxy.arcs.org.au</param-value>
		</init-param>
		<init-param>
			<description>
				server type, srb or irods
			</description>
			<param-name>server-type</param-name>
			<param-value>irods</param-value>
		</init-param>
		<init-param>
			<description>
				default idp name
			</description>
			<param-name>default-idp</param-name>
			<param-value>eResearchSA</param-value>
		</init-param>-->
		<!-- <init-param>
			<description>
				server port of srb/irods
			</description>
			<param-name>server-port</param-name>
			<param-value>1247</param-value>
		</init-param>
		<init-param>
			<description>
				server name of srb/irods
			</description>
			<param-name>server-name</param-name>
			<param-value>arcs-df.eresearchsa.edu.au</param-value>
		</init-param>
		<init-param>
			<description>
				zone name of srb/irods
			</description>
			<param-name>zone-name</param-name>
			<param-value>ARCS</param-value>
		</init-param>
		<init-param>
			<description>
				default domain of user
			</description>
			<param-name>default-domain</param-name>
			<param-value>ngspare.sapac.edu.au</param-value>
		</init-param>-->
		<!-- 
		default resource of user in this order: 
			1. resource_name equals this value; 
			2. resource_name contains this value; 
			3. first resource in the list
		 -->
		<!-- <init-param>
			<description>
				default resource of user
			</description>
			<param-name>default-resource</param-name>
			<param-value>arcs-df.eresearchsa.edu.au</param-value>
		</init-param>
		<init-param>
			<description>
				proxy host for slcs, set to empty if no proxy is needed
			</description>
			<param-name>proxy-host</param-name>
			<param-value>www-proxy.sapac.edu.au</param-value>
		</init-param>--><!-- www-proxy.sapac.edu.au -->
		<!-- <init-param>
			<description>
				proxy port for slcs, set to empty if no proxy is needed
			</description>
			<param-name>proxy-port</param-name>
			<param-value>8080</param-value>
		</init-param>
		<init-param>
			<description>
				proxy username for slcs, set to empty if no proxy is needed
			</description>
			<param-name>proxy-username</param-name>
			<param-value></param-value>
		</init-param>
		<init-param>
			<description>
				proxy password for slcs, set to empty if no proxy is needed
			</description>
			<param-name>proxy-password</param-name>
			<param-value></param-value>
		</init-param>
		<init-param>
			<description>
				dojoroot, if it is deployed at root, put a "/" here, otherwise, leave it blank
			</description>
			<param-name>dojoroot</param-name>
			<param-value></param-value>
		</init-param>-->
</servlet>
<servlet-mapping>
<servlet-name>Davis</servlet-name>
<url-pattern>/*</url-pattern>
</servlet-mapping>
	<listener>
		<listener-class>webdavis.DavisListener</listener-class>
	</listener>
	        <session-config>
                <session-timeout>3</session-timeout>
        </session-config>
</web-app>
