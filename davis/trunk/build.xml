<project name="DAVIS" default="dist" basedir=".">

  <property name="app.name"      value="davis"/>
  <property name="app.version"   value="0.0.5"/>
  <property name="build.home"    value="${basedir}/build"/>
  <property name="catalina.home" value="/home/users/shundezh/jakarta-tomcat-4.1.30"/> <!-- UPDATE THIS! -->
  <property name="dist.home"     value="${basedir}/dist"/>
  <property name="src.home"      value="${basedir}/src"/>
  <property name="web.home"      value="${basedir}/WebContent"/>
  <property name="mapserver.home"      value="${basedir}/mapserver"/>
  <property name="db.home"      value="${basedir}/db_scripts"/>

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>
  <property name="compile.target"    value="1.5"/>
  <property name="compile.source"    value="1.5"/>

  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
<!--
    <pathelement location="${foo.jar}"/>
-->

    <!-- Include all elements that Tomcat exposes to applications -->
    <pathelement location="${catalina.home}/common/classes"/>
    <fileset dir="lib/build">
      <include name="*.jar"/>
    </fileset>
    <!-- <fileset dir="${catalina.home}/common/endorsed">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/common/lib">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}/shared/lib">
      <include name="*.jar"/>
    </fileset> -->
    <fileset dir="${web.home}/WEB-INF/lib">
      <include name="*.jar"/>
    </fileset>
  </path>

<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,dist,cleanbuild"
   description="Clean build and dist directories, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>

  <target name="cleanbuild"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
  </target>


<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare" description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}"
    	   target="${compile.target}"
    	   source="${compile.source}">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>
  </target>

<!-- ==================== Dist Target ===================================== -->

<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile"
   description="Create binary distribution">

    <delete file="${build.home}/WEB-INF/lib/mail.jar"/>
    <delete file="${build.home}/WEB-INF/lib/activation.jar"/>
    <mkdir   dir="${dist.home}"/>

    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}.war"
         basedir="${build.home}"/>

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>

  <target name="prepare">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>

    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <mkdir  dir="${build.home}/WEB-INF/lib"/>
    <copy todir="${build.home}/WEB-INF/lib">
        <fileset dir="${web.home}/WEB-INF/lib">
<!--           <exclude name="**/**/mail.jar"/>
           <exclude name="**/**/activation.jar"/> -->
	</fileset>
    </copy>
  </target>
	
  <target name="tarsrc">
	<delete file="${dist.home}/${app.name}-${app.version}-src.tar.gz"/>
	<tar destfile="${dist.home}/${app.name}-${app.version}-src.tar">
	  <tarfileset dir="${basedir}">
	    <include name="build.xml"/>
	    <include name="JavaSource/**"/>
    	<include name="WebContent/**"/>
    	<include name="mapserver/**"/>
    	<include name="db_scripts/**"/>
    	<include name="docs/**"/>
    	<include name="lib/**"/>
	  </tarfileset>
	</tar>
	<gzip zipfile="${dist.home}/${app.name}-${app.version}-src.tar.gz" src="${dist.home}/${app.name}-${app.version}-src.tar"/>
	<delete file="${dist.home}/${app.name}-${app.version}-src.tar"/>
  </target>

  <target name="tarbin">
	<delete file="${dist.home}/${app.name}-${app.version}-bin.tar.gz"/>
	<tar destfile="${dist.home}/${app.name}-${app.version}-bin.tar">
	  <tarfileset dir="${basedir}">
    	<include name="mapserver/**"/>
    	<include name="db_scripts/**"/>
    	<include name="docs/**"/>
	  </tarfileset>
	  <tarfileset dir="${basedir}/dist">
    	<include name="avh.war"/>
	  </tarfileset>
	</tar>
	<gzip zipfile="${dist.home}/${app.name}-${app.version}-bin.tar.gz" src="${dist.home}/${app.name}-${app.version}-bin.tar"/>
	<delete file="${dist.home}/${app.name}-${app.version}-bin.tar"/>
  </target>
	
  <target name="test" depends="dist">
  	 <move file="${dist.home}/${app.name}.war" tofile="${dist.home}/${app.name}test.war"/>
  </target>

</project>
