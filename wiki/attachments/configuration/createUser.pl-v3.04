#!/usr/bin/env perl
# createUser     Creates a new iRODS user if necessary during login.
#                The username is generated by concatenating the first and last
#                words in the Common Name (with a period separator),
#                then mapping to lower-case. An integer is appended if
#                necessary to split duplicates. 
#                Graham Jenkins <graham@vpac.org> Dec. 2008. Rev: 20090528

use strict;      # This version has been patched so that quotes around the DN
use warnings;    # can be omitted provided DN doesn't contain adjacent spaces.
use Net::SMTP;
use File::Basename;
use File::Spec;
use vars qw($VERSION);
$VERSION = "3.04";

# Mail-message subroutine.
sub mail_mess {  # Usage: mail_mess(address, message)
  if ( defined($_[0]) ) {
    if (my $smtp=Net::SMTP->new("localhost") ) {
      $smtp->mail($ENV{USER}); $smtp->to($_[0]);
      $smtp->data("To: ",$_[0],"\nSubject: Automatic iRODS User Creation",
                               " [".$$."]\n\n".$_[1]);
      $smtp->quit();
      print STDERR "Notified: ".$_[0]."\n\n"
    }
  }              # Note: Pid is appended to subject to foil
}                # over-enthusiastic spam filters

# Check usage, open config'n file containing command-path, valid DN-patterns
die basename($0)." should not be invoked by 'iexecmd!\n"
  if ( (defined($ENV{spClientUser}) && length($ENV{spClientUser}) > 0 ) or
       (defined($ENV{spClientUser}) && length($ENV{spClientUser}) > 0 ) );
die "Usage: ".basename($0)." DN\n".
    "   or: ".basename($0)." FirstName .. LastName SharedToken Password"."\n".
    " e.g.: ".basename($0).' "/C=AU/O=APACGrid/OU=VPAC/CN=Jane Doe"'."\n".
    "   or: ".basename($0).' Jane Doe VI8SEdbk_8Ph3E7M1O8jdABRAC2 GuessMe'."\n"
  if ( ($#ARGV < 0) || ( ($ARGV[0] !~ m/^\057/) && ($ARGV[0] !~ m/^[A-Z]/) ) );
for (my $j=1;$j<=$#ARGV;$j++) {$ARGV[0]=$ARGV[0]." ".$ARGV[$j]}
my $config_dir=$ENV{irodsConfigDir};
die "Environment variable: \$irodsConfigDir  not defined!\n" 
  if ! defined($config_dir);
my $config_file=File::Spec->catdir($config_dir,"createUser.config");
die "Can't open file: $config_file\n" if ! open(CF,$config_file);

# Extract command-path, look for matching DN-pattern and optional email address
my ($path, $addr, $cn, @fields, $st_count);
while ( <CF> ) {
  chomp;
  if      ( substr($_,0,1) eq "I" ) { (@fields)=split(); $path=$fields[1] }
  elsif   ( substr($_,0,1) eq "A" ) { (@fields)=split(); $addr=$fields[1] }
  elsif ( ( substr($_,0,1) =~ /[SN]/ ) && ( ! defined ($cn) ) ) {
    my $dn_starts=$_;
    until ( (length($dn_starts) < 1) || ($dn_starts =~m/^\057/) ) {
      $dn_starts=substr($dn_starts,1)
    }
    if ( substr($ARGV[0],0,length($dn_starts)) eq $dn_starts ) {
      foreach my $field ( (@fields)=split("/",$ARGV[0])) {
        if ( $field =~/^CN=/ ) {       # If a matching DN-pattern is found,
          $cn=substr($field,3);        # extract CN and set Shared-Token-Count
          if( substr($_,0,1) eq "S" ) {$st_count=1} else {$st_count=0}
        }
      }
    }
  }
}

# Check that we got the path
die "Path not defined\n" if ! defined($path);

# If we didn't get a valid DN, we may have FirstName..SharedToken Password
my $pass;
if ( (! defined($cn)) && ($ARGV[0]=~m/^[A-Z]/) ) {
  (@fields)=split(" ",$ARGV[0]);$pass=pop(@fields);$ARGV[0]=join(" ",(@fields));
  $cn=$ARGV[0]; $st_count=1
}
exit(0) if ! defined($cn);

# Extract and validate any SharedToken
my $st_plus = "";
(@fields)=split(" ",$cn);
if ($st_count==1) {
  if(length($fields[$#fields])==27){$st_plus="'<ST>".$fields[$#fields]."</ST>'"}
  else                             {exit(0)                                    }
}

# If the DN starts in "/" and contains SharedToken we may have to update record
my $dn_plus = "'".$ARGV[0]."'";
if ( ($st_count == 1) && ($ARGV[0] =~ m/^\057/) ) {
  my $st_value = "'%<ST>".$fields[$#fields]."</ST>%'";
  `$path/iquest "select USER_NAME
                 where  USER_INFO like $st_plus
                 and    USER_DN   <>   $dn_plus"  2>/dev/null |
   awk '/^USER_NAME/ {print \$3}' |
   while read U; do
     $path/iadmin moduser \$U DN $dn_plus >/dev/null 2>&1
   done`
}

# If the ST is attached to an existing iRODS username, update password and exit
if ($st_count == 1) {
  my $u=`$path/iquest "select USER_NAME
                       where  USER_INFO like $st_plus" 2>/dev/null |
         awk '/^USER_NAME/ {print \$3;exit}'`;
  if ( defined($u) && (length($u)>0) ) {
    chomp($u);
    if ( defined($pass) ) { `$path/iadmin moduser $u password "$pass"` }
    exit(0)
  }
}

# If the DN is attached to an existing iRODS username, exit
`$path/iquest "select USER_NAME where USER_DN = $dn_plus" >/dev/null 2>&1`;
exit(0) if ! $?;

# Otherwise create a new iRODS username and optionally send email notification
if ( ! defined($pass) ) { $pass="x".int(rand(time)) }
my $base_name=lc($fields[0]);
if (($#fields-$st_count)>0) {$base_name.=".".lc($fields[$#fields-$st_count])}
my $user_name=$base_name;    # Adjust loop limit as appropriate
for (my $j=1;$j<=20;$j++) {  # Note: mkuser won't properly handle a long DN
  `$path/iadmin mkuser  $user_name rodsuser         >/dev/null 2>&1 && \
   $path/iadmin moduser $user_name DN   $dn_plus    >/dev/null 2>&1 && \
   $path/iadmin moduser $user_name info $st_plus    >/dev/null 2>&1 && \
   $path/iadmin moduser $user_name password "$pass" >/dev/null 2>&1`;
  if ($?) { $user_name=$base_name.$j }  # A Shared-Token value is recorded in
  else    {                             # 'user_info' so that DNs with STs can
    my $zone=`iadmin lz`; chomp($zone); # easily be recognised.
    print $user_name."#".$zone,"\n";
    mail_mess($addr, $dn_plus." => ".$user_name." .. Completed!");
    exit(0)
  }
}

# Failure
mail_mess($addr, $dn_plus.": Username creation failed!");
die $dn_plus.": Username creation failed!\n";
